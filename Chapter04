//Chapter 04

//An expression is composed of one or more operands and yields a result when it is evaluated. The simplest form of an expression is a single literal or variable. The result of such an expression is the value of the variable or literal. More complicated expressions are formed from an operator and one or more operands.

//4.1 Fundamentals

//4.1.1 Basic Concepts

//Understanding expressions with multiple operators requires understanding the precedence and associativity of the operators and may depend on the order of evaluation of the operands.

//What may be a bit surprising is that small integral type operands (e.g., bool, char, short, etc) are generally promoted to a larger integral type, typically int.

//When we use an overloaded operator, the meaning of the operator—including the type of its operand(s) and the result—depend on how the operator is defined. However, the number of operands and the precedence and the associativity of the operator cannot be changed.

//lvalue and rvalue
//Every expression in C++ is either an rvalue or an lvalue. These names are inherited from C and originally had a simple mnemonic purpose: lvalues should stand on the left-hand side of an assignment whereas rvalues could not.
//In C++, the distinction is less simple. In C++, an lvalule expression yields an object or a function. However, some lvalues, such as const objects, may not be the left-hand operand of an assignment. Moreover, some expressions yields objects but return them as rvalues, not lvalues. Roughly speaking, when we use an object as an rvalue, we use the object's value(its contents). When we use an object as an lvalue, we use the object's identity (its location in memory).

//Operators differ as to whether they require lvalue or rvalue operands and as to whether they return lvalues or rvalues. The important point is that (with one exception that we’ll cover in § 13.6 (p. 531)) we can use an lvalue when an rvalue is required, but we cannot use an rvalue when an lvalue (i.e., a location) is required. When we use an lvalue in place of an rvalue, the object’s contents (its value) are used. We have already used several operators that involve lvalues.
//Assignment requires a (nonconst) lvalue as its left-hand operand and yields its left-hand operand as an lvalue;
//The address-of operator requires an lvalue operand and returns a pointer io its operand as an rvalue;
//The built-in dereference and subscript operators and the iterator dereference and string and vector subscript operators all yields lvalues;
//The built-in and iterator increment and decrement operators require lvalue operands and the prefix version (which are the ones we have used so far) also yields lvalues.

//lvalues and rvalues also differ when used with decltype. When we apply decltype to an expression (other than a variable), the result is a reference type if the expression yields an lvalue. As an example, assume p is an int*. Because dereference yields an lvalue, decltype (*p) is int&. On the other hand, because the address-of operator yields an rvalue, decltype (&p) is int**, that is, a pointer to a pointer to type int.

//4.1.2 Precedence and Associativity

//An expression with two or more operators is a compound expression. 
//Evaluating a compound expression involves grouping the operands to the operators. Precedence and associativity determine how the operands are grouped. That is, they determine which parts of the expression are the operands for each of the operators in the expression.
//Programmers can override these rules by parenthesizing compound expressions to force a particular grouping.

//Left associative: operators at the same precedence group left to right.

//4.1.3 Order of Evaluation

//Precedence specifies how the operands are grouped. It says nothing about the order in which the operands are evaluated. In most cases, the order is largely unspecified. In the following expression
int i = f1() * f2();
//we know that f1 and f2 must be called before the multiplication can be done. After all, it is their results that are multiplied. However, we have no way of knowing whether f1 will be called before f2 or vice versa.

//There are four operators that do guarantee the order in which operands are evaluated: && || ?: ,

//When you write compound expressions, two rules of thumb can be helpful:
//1. When in doubt, parenthesize expressions to force the grouping that the logic of your program requires.
//2. If you change the value of an operand, don’t use that operand elsewhere in the same expresion.

//4.2 Arithmetic Operators
//All arithmetic operators are left associative, meaning that they group left to right when the precedence levels are the same.

//Unless noted otherwise, the arithmetic operators may be applied to any of the arithmetic types or to any type that can be converted to an arithmetic type. The operands and results of these operators are rvalues.

//When applied to a pointer or arithmetic value, unary plus returns a (possibly promoted) copy of the value of its operand.

//Division between integers returns an integer. If the quotient contains a fractional part, it is truncated toward zero.

//The operands to % must have integral type.

//The modulus operator is defined so that if m and n are integers and n is nonzero, then (m/n)*n + m%n is equal to m. By implication, if m%n is nonzero, it has the same sign as m. Earlier versions of the language permitted m%n to have the same sign as n on implementations in which negative m/n was rounded away from zero, but such implementations are now prohibited. Moreover, except for the obscure case where -m overflows, (-m)/n and m/(-n) are always equal to -(m/n), m%(-n) is equal to m%n, and (-m)%n is equal to -(m%n).

//4.3 Logical and Relational Operators

//All operands to the logical and relational operators are rvalues and the result is an rvalue.

//It is usually a bad idea to use the boolean literals true and false as operands in a comparison. These literals should be used only to compare to an object of type bool.
if (val == true) { /* ... */ } // true only if val is equal to 1! 
//There are two problems with this approach. First, it is longer and less direct than the previous code (although admittedly when first learning C++ this kind of abbreviation can be perplexing). Much more importantly, when val is not a bool, this comparison does not work as expected.
//If val is not a bool, then true is converted to the type of val before the == operator is applied. That is, when val is not a bool, it is as if we had written
if (val == 1) { /* ... */ }

//4.4 Assignment Operators

//The left-hand operand of an assignment operator must be a modifiable lvalue. 
//The result of an assignment is its left-hand operand, which is an lvalue. The type of the result is the type of the left-hand operand. If the types of the left and right operand differ, the right-hand operand is converted to the type of the left.

//Under the new standard, we can use a braced initializer list (§ 2.2.1, p. 43) on the
k = {3.14}; // error: narrowing conversion
vector<int> vi; // initially empty
vi = {0,1,2,3,4,5,6,7,8,9}; // vi now has ten elements, values 0 through 9
//If the left-hand operand is of a built-in type, the initializer list may contain at most one value, and that value must not require a narrowing conversion.

//Regardless of the type of the left-hand operand, the initializer list may be empty. In this case, the compiler generates a value-initialized temporary and assigns that value to the left-hand operand.

//Assignment is right associative

//Assignments often occur in conditions. Because assignment has relatively low precedence, we usually must parenthesize the assignment for the condition to work properly.

//Compound Assignment Operators
a+=3;    //same as a=a+3;
//with the exception that, when we use the compound assignment, the left-hand operand is evaluated only once. If we use an ordinary assignment, that operand is evaluated twice: once in the expression on the right-hand side and again as the operand on the left hand. In many, perhaps most, contexts this difference is immaterial aside from possible performance consequences.

//4.5 Increment and Decrement Operators

//There are two forms of these operators: prefix and postfix. So far, we have used only the prefix form. This form increments (or decrements) its operand and yields the changed object as its result. The postfix operators increment (or decrement) the operand but yield a copy of the original, unchanged value as its result.

//Prefix and postfix operators require lvalue operands. The prefix operators return the object itself as an lvalue. The postfix operators return a copy of the object's original value as an rvalue.

//The precedence of postfix increment is higher than that of the dereference operator, so *pbeg++ is equivalent to *(pbeg++).

//4.6 The Member Access Operators

//The dot and arrow operators provide for member access. The dot operator fetches a member from an object of class type; arrow is defined so that ptr->mem is a synonym for (*ptr).mem.

//Because dereference has a lower precedence than dot, we must parenthesize the dereference subexpression.

//The arrow operator requires a pointer operand and yields an lvalue. The dot operator yields an lvalue if the object from which the member is fetched is an lvalue; otherwise the result is an rvalue.

//4.7 The Conditional Operator

//The result of the conditional operator is an lvalue if both expressions are lvalues or if they convert to a common lvalue type. Otherwise the result is an rvalue.

//We can nest one conditional operator inside another.
finalgrade = (grade > 90) ? "high pass" : (grade < 60) ? "fail" : "pass";

//The conditional operator is right associative, meaning (as usual) that the operands group right to left.

//The conditional operator has fairly low precedence. When we embed a conditional expression in a larger expression, we usually must parenthesize the conditional subexpression.

//4.8 The Bitwise Operators

//The bitwise operators take operands of integral type that they use as a collection of bits.

//If the operand is signed and its value is negative, then the way that the "sign bit" is handled in a number of the bitwise operations is machine dependent. Moreover, doing a left shift that changes the value of the sign bit is undefined.
//Because there are no guarantees for how the sign bit is handled, we strongly recommend using unsigned types with the bitwise operators.

//Shift Operations (aka IO operators) are left associative.
//An overloaded operator has the same precedence ans associativity as the built-in version of that operator.
//The expression
cout<<"hi"<<"there"<<endl;
//executes as:
( (cout<<"hi")<<"there")<<endl;

//The shift operators have midlevel precedence: lower than the arithmetic operators but higher than the relational, assignment, and conditional operators.

//4.9 The sizeof Operator

//The sizeof operator returns the size, in bytes, of an expression or a type name. The operator is right associative. The result of sizeof is a constant expression of type size_t. 
//The operator takes one of two forms:
sizeof(type);
sizeof expr;
//The sizeof operator is unusual in that it does not evaluate its operand.

//Under the new standard, we can use the scope operator to ask for the size of a member of a class type. Ordinarily we can only access the members of a class through an object of that type. We don’t need to supply an object, because sizeof does not need to fetch the member to know its size.

//The result of applying sizeof depends in part on the type involved:
//sizeof char or an expression of type char is guaranteed to be 1.
//sizeof a reference type returns the size of an object of the referenced type.
//sizeof a pointer returns the size needed hold a pointer.
//sizeof a dereferenced pointer returns the size of an object of the type to which the pointer points; the pointer need not be valid.
//sizeof an array is the size of the entire array. It is equivalent to taking the sizeof the element type times the number of elements in the array. Note that sizeof does not convert the array to a pointer.
//sizeof a string or a vector returns only the size of the fixed part of these types; it does not return the size used by the object’s elements.

//4.10 Comma Operator

//The comma operator takes two operands, which it evaluates from left to right. Like the logical AND and logical OR and the conditional operator, the comma operator guarantees the order in which its operands are evaluated.
//The left-hand expression is evaluated and its result is discarded. The result of a comma expression is the value of its right-hand expression.
//The result is an lvalue if the right-hand operand is a lvalue.

//4.11 Type Conversions

//Two types are related if there is a conversion between them.

//C++ defines a set of conversions to transform the operands to a common type. These conversion are carried out automatically without programmer intervention - and sometimes without programmer knowledge. For that reason, they are referred to as implicit conversion.

//The implicit conversions among the arithmetic types are defined to preserve precision, if possible. Most often, if an expression has both integral and floatingpoint operands, the integer is converted to floating-point.
//In an initialization, the type of the object we are initializing dominates. The initializer is converted to the object's type.

//When Implicit Conversions Occur:
//The compiler automatically converts operands in the following circumstances:
//In most expressions, values of integral types smaller than int are first promoted to an appropriate larger integral type.
//In conditions, nonbool expressions are converted to bool.
//In initializations, the initializer is converted to the type of the variable; in assignments, the right-hand operand is converted to the type of the left-hand.
//In arithmetic and relational expressions with operands of mixed types, the types are converted to a common type.
//As we’ll see in Chapter 6, conversions also happen during function calls.

//4.11.1 The Arithmetic Conversions
//The arithmetic conversions, convert one arithmetic type to another. The rules define a hierarchy of type conversions in which operands to an operator are converted to the widest type.

//Integral Promotions
//The integral promotions convert the small integral types to a larger integral type. The types bool, char, signed char, unsigned char, short, and unsigned short are promoted to int if all possible values of that type fit in an int. Otherwise, the value is promoted to unsigned int.
//The larger char types (wchar_t, char16_t, and char32_t) are promoted to the smallest type of int, unsigned int, long, unsigned long, long long, or unsigned long long in which all possible values of that character type fit.

//When the signedness differs and the type of the unsigned operand is the same as or larger than that of the signed operand, the signed operand is converted to unsigned. For example, given an unsigned int and an int, the int is converted to unsigned int. It is worth noting that if the int has a negative value, the result will be converted as described in, with the same results.

//Understanding the Arithmetic Conversions
bool flag; 
char cval;
short sval; 
unsigned short usval;
int ival; 
unsigned int uival;
long lval; 
unsigned long ulval;
float fval; 
double dval;
3.14159L + 'a'; // 'a' promoted to int, then that int converted to long double
dval + ival; // ival converted to double
dval + fval; // fval converted to double
ival = dval; // dval converted (by truncation) to int
flag = dval; // if dval is 0, then flag is false, otherwise true
cval + fval; // cval promoted to int, then that int converted to float
sval + cval; // sval and cval promoted to int!!!
cval + lval; // cval converted to long
ival + ulval; // ival converted to unsigned long
usval + ival; // promotion depends on the size of unsigned short and int
uival + lval; // conversion depends on the size of unsigned int and long

//4.11.2 Other Implicit Conversions

//Array to Pointer Conversion
//In most expressions, when we use an array, the array is automatically converted to a pointer to the first element in that array.

//This conversion is not performed when an array is used with decltype or as the operand of the address-of (&), sizeof, or typeid (which we’ll cover in operators. The conversion is also omitted when we initialize a reference to an array. As we’ll see in, a similar pointer conversion happens when we use a function type in an expression.

//Pointer Conversions
//There are several other pointer conversions: A constant integral value of 0 and the literal nullptr can be converted to any pointer type; a pointer to any nonconst type can be converted to void*, and a pointer to any type can be converted to a const void*. We’ll see in that there is an additional pointer conversion that applies to types related by inheritance.

//Conversions to bool
//Conversions to bool: There is an automatic conversion from arithmetic or pointer types to bool. If the pointer or arithmetic value is zero, the conversion yields false; any other value yields true.

//Conversion to const
//Conversion to const: We can convert a pointer to a nonconst type to a pointer to the corresponding const type, and similarly for references. That is, if T is a type, we can convert a pointer or a reference to T into a pointer or reference to const T, respectively.

//Conversions Defined by Class Types
//Class types can define conversions that the compiler will apply automatically. The compiler will apply only one class-type conversion at a time. In § 7.5.4 (p. 295) we’ll see an example of when multiple conversions might be required, and will be rejected.



















