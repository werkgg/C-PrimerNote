//Chapter03 String, Vectors and Arrays

//3.1 Namespace using Declarations

//A using declaration lets us use a name from a namespace without qualifying the name with a namespace_name:: prefix. A using declaration has the form
using namespace::name;

//Headers Should Not Include using Declarations
//Code inside headers ordinarily should not use using declarations. The reason is that the contents of a header are copied into the including program’s text. If a header has a using declaration, then every program that includes that header gets that same using declaration. As a result, a program that didn’t intend to use the specified library name might encounter unexpected name conflicts.

//3.2 Library string type

//A string is a variable-length sequence of characters. To use the string type, we must include the string header. Because it is part of the library, string is defined in the std namespace. Our examples assume the following code:
#include <string>
using std::string;

//3.2.1 Defining and Initializing strings

//Ways to initialize a string
string s1;       //Default initializing; s1 is the empty string
string s2(s1);   //s2 is a copy of s1
string s2=s1;    //Equivalent to s2(s1), s2 is a copy of s1
string s3("value");    //s3 is a copy of the string literal, not including the null
string s3="value";     //Equivalent to s3("value"), s3 is a copy of the string literal
string s4(n, 'c');     //Initalize s4 with n copies of the character 'c'

//When we initialize a variable using =, we are asking the compiler to copy initialize the object by copying the initializer on the right-hand side into the object being created. Otherwise, when we omit the =, we use direct initialization.

//3.2.2 Operations on strings
os<<s;    //writes s onto output stream os, returns os
is>>s;    //reads whitespace-separated string from is into s, returns is
getline(is, s);    //reads a line of input from 'is' into s. Return 'is'
s.empty();    //returns true if s is empty
s.size();    //returns the number of characters in s
s[n];    //return a reference to the char at position n in s; positions start at 0
s1+s2;    //returns a string that is the concatenation of s1 and s2
s1=s2;    //replaces characters in s1 with a copy of s2
s1==s2;    //the strings s1 and s2 are equal if they contain the same characters
s1!=s2;
<, <=, >, >=    //comparison are case-sensitive and u se dictionary ordering

//Sometimes we do no want to ignore the whitespace in out input. In such cases, we can use the getline function instead of the >> operator.
//The getline function takes an input stream and a string. This function reads the given stream up to and including the first newline and stores what it reads - not including the newline - in its string argument.

//string::size_type Type
//size returns a string::size_type value.
//The string class—and most other library types—defines several companion types. These companion types make it possible to use the library types in a machineindependent manner. The type size_type is one of these companion types. To use the size_type defined by string, we use the scope operator to say that the name size_type is defined in the string class.
//Although we don’t know the precise type of string::size_type, we do know that it is an unsigned type big enough to hold the size of any string. Any variable used to store the result from the string size operation should be of type string::size_type.

//Admittedly, it can be tedious to type string::size_type. Under the new standard, we can ask the compiler to provide the appropriate type by using auto or decltype:
auto len = line.size();    //len has type string::size_type

//Becuase size returns an unsigned type, it is essential to remember that expression that mix signed and unsigned data can have surprising results.

//We can use one type where another type is expected if there is a conversion from the given type to the expected type. The string library lets uf convert both character literals and character string literals to strings. 
//When we mix the strings and string or character literals, at least one operand to each + operator must be of string type.

//For historical reasons, and for compatibility with C, string literals are not standard library strings. It is important to remember that these types differ when you use string literals and library strings.

//3.2.3 Dealing with the Characters in a string

//In addition to facilities defined specifically for C++, the C++ library incorporates the C library. Headers in C have names of the form name .h. The C++ versions of these headers are named c name—they remove the .h suffix and precede the name with the letter c. The c indicates that the header is part of the C library.
//Hence, cctype has the same contents as ctype.h, but in a form that is appropriate for C++ programs. In particular, the names defined in the cname headers are defined inside the std namespace, whereas those defined in the .h versions are not.
//Ordinarily, C++ programs should use the cname versions of headers and not the name .h versions. That way names from the standard library are consistently found in the std namespace. Using the .h headers puts the burden on the programmer to remember which library names are inherited from C and which are unique to C++.

//If we want to change the value of the characters in a string, we must define the loop variable as a reference type. Remember that a reference is just another name for a given object. When we use a reference as our control variable, that variable is bound to each element in the sequence in turn. Using the reference, we can change the character to which the reference is bound.
for(auto &c:s) {};

//The subscript operator (the [] operator) takes a string::size_type value that denotes the position of the character we want to access. The operator returns a reference to the character at the given position.
//Subscripts for string start at zero; if s is a string with at least two characters, then s[0] is the first character, the last character is in s[s.size()-1]

//The result of using an index outside this range is undefined. By implication, subscripting an empty string is undefined.

//range-based for: range for statement
for (declaration:expression)
	statement
//expression is an object of a type that represents a sequence, and declaration defines the variable that we’ll use to access the underlying elements in the sequence. On each iteration, the variable in declaration is initialized from the value of the next element in expression.

//The subscript operator (the [ ] operator) takes a string::size_type value that denotes the position of the character we want to access. The operator returns a reference to the character at the given position.

//Caution: Subscripts are Unchecked
//When we use a subscript, we must ensure that the subscript is in range. That is, the subscript must be >= 0 and < the size() of the string. One way to simplify code that uses subscripts is always to use a variable of type string::size_type as the subscript. Because that type is unsigned, we ensure that the subscript cannot be less than zero. When we use a size_type value as the subscript, we need to check only that our subscript is less than value returned by size().
//The library is not required to check the value of an subscript. The result of using an out-of-range subscript is undefined.

//3.3 Library vector Type

//A vector is a collection of objects, all of which have the same type. Every object in the collection has an associated index, which gives access to that object. A vector is often referred to as a container becuase it "contains" other objects.

//Templates are not themselves functions or classes. Instead, they can be thought of as instructions to the compiler for generating classes or functions. The process that the compiler uses to create classes or functions from templates is called instantiation. When we use a template, we specify what kind of class or function we want the compiler to instantiate.

//For a class template, we specify which class to instantiate by supplying additional information, the nature of which depends on the template. How we specify the information is always the same: We supply it inside a pair of angle brackets following the template’s name.

//vector is a template, not a type. Types generated from vector must include the element type, for example, vector<int>.

//3.3.1 Defining and Initializing vectors

vector<T> v1;    //vector that holds object of type T. Default initialization; v1 is empty
vector<T> v2(v1);    //v2 has a copy of each element in v1
vector<T> v2=v1;    //Equivalent to v2(v1), v2 is a copy of the element in v1
vector<T> v3(n, val);    //v3 has n element with value val
vector<T> v4(n);    //v4 has n copies of a value-initialized object
vector<T> v5{a, b, c...};    //v5 has as many elements as there are initializers; elements are initialized by corresponding initializers
vector<T> v5={a, b, c...};    //Equivalent to v5{a, b, c...}

//So far, we have seen two examples where the form of initialization matters: when we use the copy initialization form (i.e., when we use =), we can supply only a single initializer; and when we supply an in-class initializer, we must either use copy initialization or use curly braces. A third restriction is that we can supply a list of element values only by using list initialization in which the initializers are enclosed in curly braces. We cannot supply a list of initializers using parentheses.

//value initialization
//We can usually omit the value and supply only a size. In this case the library creates a value-initialized element initializer for us. This library-generated value is used to initialize each element in the container. The value of the element initializer depends on the type of the elements stored in the vector.
//If the vector holds elements of a built-in type, such as int, then the element initializer has a value of 0. If the elements are of a class type, such as string, then the element initializer is itself default initialized.
//There are two restrictions on this form of initialization: The first restriction is that some classes require that we always supply an explicit initializer. If our vector holds objects of a type that we cannot default initialize, then we must supply an initial element value; it is not possible to create vectors of such types by supplying only a size.
//The second restriction is that when we supply an element count without also supplying an initial value, we must use the direct form of initialization.

//In a few cases, what initialization means depends upon whether we use curly braces or parentheses to pass the initializer(s). For example, when we initialize a vector<int> from a single int value, that value might represent the vector’s size or it might be an element value. Similarly, if we supply exactly two int values, those values could be a size and an initial value, or they could be values for a two-element vector. We specify which meaning we intend by whether we use curly braces or parentheses:
vector<int> v1(10); // v1 has ten elements with value 0
vector<int> v2{10}; // v2 has one element with value 10
vector<int> v3(10, 1); // v3 has ten elements with value 1
vector<int> v4{10, 1}; // v4 has two elements with values 10 and 1

//3.3.2 Adding Elements to a Vector
//We cannot use a range for if the body of the loop adds elements to the vector. The body of a range for must not change the size of the sequence over which it is iterating.

//3.3.3 Other vector Operations
v.empty();    //return true if v is empty; otherwise returns false
v.size();    //returns the number of elements in v
v.push_back(t);    //adds an element with the value t to the end of v
v[n];    //returns a reference to the element at position n in v
v1=v2;    //replace the element in v1 with a copy of the elements in v2
v1={a, b, c...};    //replaces the elements in v1 with a copy of the elements in the comma-separated list
v1==v2;    //v1 and v2 are equal if they have the same number of elements and each element in v1 is equal to the corresponding element in v2
v1!=v2;
<, <=, >, >=    //have their normal meanings using dictionary ordering

//To use size_type, we must name the type in which it is defined. A vector type always includes its element type.

//The subscript operator on vector (and string) fetches an existing element; it does not add an element.
//It is crucially importnat to understand that we may use the subscript operator (the [] operator) to fetch only elements that actually exist. The value we get at run time is undefined for such case.

//Attempting to subscript elements that do not exist is, unfortunately, an extremely common and pernicious programming error. So-called buffer overflow errors are the result of subscripting elements that don’t exist. Such bugs are the most common cause of security problems in PC and other applications.

//A good way to ensure that subscripts are in range is to avoid subscripting altogether by using a range for whenever possible.

//3.4 Introducing Iterators
//All of the library containers have iterators, but only a few of them support the subscript operator. Technically speaking, a string is not a container type, but string supports many of the container operations. 
//Like pointers (§ 2.3.2, p. 52), iterators give us indirect access to an object. In the case of an iterator, that object is an element in a container or a character in a string. We can use an iterator to fetch an element and iterators have operations to move from one element to another. As with pointers, an iterator may be valid or invalid. A valid iterator either denotes an element or denotes a position one past the last element in a container. All other iterator values are invalid.

//3.4.1 Using Iterators
//Unlike pointers, we do not use the address-of operator to obtain an iterator. Instead, types that have iterators have members that return iterators. In particular, these types have member named begin and end. the begin member returns an iterator that denotes the first element(or first character).

//Iterator Operations
*iter;    //return a reference to the element denoted bu the iterator iter
iter->mem;    //deferences iter and fetches the member named mem from the underlying element. Equivalent to (*iter).mem
++iter;    //increments iter to refer to the next element in the container.
--iter;    //decrements iter to refer to the previous element in the container.
iter1==iter2;    //compares two iterators for equality (inequality). two iterators are equal if they denote the same element or if they are the off-the-end iterator for the same container
iter1!=iter2;

//Deferencing an invalid iterator or an off-the-end iterator has undefined behavior.

//Because the iterator returned from end does not denote an element, it may not be incremented or deferenced.

//Programmers coming to C++ from C or Java might be surprised that we used != rather than < in our for loops. C++ programmers use != as a matter of habit. They do so for the same reason that they use iterators rather than subscripts: This coding style applies equally well to various kinds of containers provided by the library.
//As we’ve seen, only a few library types, vector and string being among them, have the subscript operator. Similarly, all of the library containers have iterators that define the == and != operators. Most of those iterators do not have the < operator. By routinely using iterators and !=, we don’t have to worry about the precise type of container we’re processing.

//iterator and const_iterator
//const_iterator may read but not write the element it denotes; and object of type iterator can both read and write.

//The term iterator is used to refer to three different entities. We might mean the concept of an iterator, or we might refer to the iterator type defined by a container, or we might refer to an object as an iterator.
//What’s important to understand is that there is a collection of types that are related conceptually. A type is an iterator if it supports a common set of actions. Those actions let us access an element in a container and let us move from one element to another.
//Each container class defines a type named iterator; that iterator type supports the actions of an (conceptual) iterator.

auto it3 = v.cbegin(); // it3 has type vector<int>::const_iterator
//As do the begin and end members, these members return iterators to the first and one past the last element in the container. However, regardless of whether the vector (or string) is const, they return a const_iterator.

(*it).empty();    //the parentheses in (*it) are necessary
//Without parentheses, the dot operator would apply to it, not to the resulting object.
(*it).empty() // dereferences it and calls the member empty on the resulting object
*it.empty() // error: attempts to fetch the member named empty from it
// but it is an iterator and has no member named empty

//To simplify expression, the language defines the arrow operator (the -> operator). The arrow operator combines dereference and member access into a single operation. That is, it->mem is a synonym for (*it).mem

//It is important to realize that loops that use iterators should not add elements to the container to which the iterators refer.

//3.4.2 Iterator Arithmetic

//We can also subtract two iterators so long as they refer to elements in, or one off the end of, the same vector or string. The result is the distance between the iterators. By distance we mean the amount by which we’d have to change one iterator to get the other. The result type is a signed integral type named difference_type. Both vector and string define difference_type. This type is signed, because subtraction might have a negative result.

//3.5 Arrays

//An array is a data structure that is similar to the library vector type but offers a different trade-off between performance and flexibility. Like a vector, an array is a container of unnamed objects of a single type that we access by position. Unlike a vector, arrays have fixed size; we cannot add elements to an array. Because arrays have fixed size, they sometimes offer better run-time performance for specialized applications. However, that run-time advantage comes at the cost of lost flexibility.

//If you don't know exactly how many elements you need, use a vector.

//3.5.1

//Arrays are compound type. An array declarator has the form a[d], where a is the name being defined and d is the dimension of the array.
//The dimension specifies the number of elements and must be greater than zero. The number of elements in an array is part of the array's type. As a result, the dimension must be known at compile time, which means that the dimension must be a constant expression.

//By default, the elements in an array are default initialized.
//As with variables of built-in type, a default-initialized array of built-in type that is defined inside a function will have undefined values.

//We can list initialize the elements in an array. When we do so, we can omit the dimension. If we omit the dimension, the compiler infers it from the number of initializers. If we specify a dimension, the number of initializers must not exceed the specified size. If the dimension is greater than the number of initializers, the initializers are used for the first elements and any remaining elements are value initialized.

//Character arrays have an additional form of initialization: We can initialize such arrays from a string literal. When we use this form of initialization, it is important to remember that string literals end with a null character. That null character is copied into the array along with the characters in the literal.

//We cannot initialize an array as a copy of another array, nor is it legal to assign one array to another.

//Some compilers allow array assignment as a compiler extension. It is usually a good idea to avoid using nonstandard features. Programs that use such features, will not work with a different compiler.

//Understanding complicated array declarations
int *ptrs[10]; // ptrs is an array of ten pointers to int
int &refs[10] = /* ? */; // error: no arrays of references
int (*Parray)[10] = &arr; // Parray points to an array of ten ints
int (&arrRef)[10] = arr; // arrRef refers to an array of ten ints

//By default, type modifiers bind right to left. Reading the definition of ptrs from right to left is easy: We see that we’re defining an array of size 10, named ptrs, that holds pointers to int.
//Reading the definition of Parray from right to left isn’t as helpful. Because the array dimension follows the name being declared, it can be easier to read array declarations from the inside out rather than from right to left. Reading from the inside out makes it much easier to understand the type of Parray. We start by observing that the parentheses around *Parray mean that Parray is a pointer. Looking right, we see that Parray points to an array of size 10. Looking left, we see that the elements in that array are ints. Thus, Parray is a pointer to an array of ten ints. Similarly, (&arrRef) says that arrRef is a reference. The type to which it refers is an array of size 10. That array holds elements of type int.

//Of course, there are no limits on how many type modifiers can be used:
int *(&arry)[10] = ptrs; // arry is a reference to an array of ten pointers
//Reading this declaration from the inside out, we see that arry is a reference. Looking right, we see that the object to which arry refers is an array of size 10. Looking left, we see that the element type is pointer to int. Thus, arry is a reference to an array of ten pointers.

//3.5.2 Accessing the Elements of an Array
//When we use a variable to subscript an array, we normally should define that variable to have type size_t. size_t is a machine-specific unsigned type that is guaranteed to be large enough to hold the size of any object in the memory. The size_t type is defined in the cstddef header, which is the C++ version of the seddef.h header from the C library.

//The most common source of security problems are buffer overflow bugs. Such bugs occur when a program fails to check a subscript and mistakenly uses memory outside the range of an array or similar data structure.

//3.5.3 Pointers and Arrays
//In C++ pointers and arrays are closely intertwined. In particular, as we'll see, when we use an array, the compiler ordinarily converts the array to a pointer.

//Arrays have a special property—in most places when we use an array, the compiler automatically substitutes a pointer to the first element:
string *p2 = nums; // equivalent to p2 = &nums[0]
//In most expressions, when we use an object of array type, we are really using a pointer to the first element in that array.

//There are various implications of the fact that operations on arrays are often really operations on pointers. One such implication is that when we use an array as an initializer for a variable defined using auto, the deduced type is a pointer, not an array:
int ia[] = {0,1,2,3,4,5,6,7,8,9}; // ia is an array of ten ints
auto ia2(ia); // ia2 is an int* that points to the first element in ia
ia2 = 42; // error: ia2 is a pointer, and we can't assign an int to a pointer

//It is worth noting that this conversion does not happen when we use decltype. The type returned by decltype(ia) is array of ten ints:
// ia3 is an array of ten ints
decltype(ia) ia3 = {0,1,2,3,4,5,6,7,8,9};
ia3 = p; // error: can't assign an int* to an array
ia3[4] = i; // ok: assigns the value of i to an element in ia3

//Although we can compute an off-the-end pointer, doing so is error-prone. To make it easier and safer to use pointers, the new library includes two functions, named begin and end. These functions act like the similarly named container members. However, arrays are not class types, so these functions are not member functions. Instead, they take an argument that is an array:
int ia[] = {0,1,2,3,4,5,6,7,8,9}; // ia is an array of ten ints
int *beg = begin(ia); // pointer to the first element in ia
int *last = end(ia); // pointer one past the last element in ia
//begin returns a pointer to the first, and end returns a pointer one past the last element in the given array: These functions are defined in the iterator header.

//The result of subtracting two pointers is a library type named ptrdiff_t. Like size_t, the ptrdiff_t type is a machine-specific type and is defined in the cstddef header. Because subtracting might yield a negative distance, ptrdiff_t is a signed integral type.

//Although the utility may be obscure at this point, it is worth noting that pointer arithmetic is also valid for null pointers and for pointers that point to an object that is not an array. In the latter case, the pointers must point to the same object, or one past that object. If p is a null pointer, we can add or subtract an integral constant expression whose value is 0 to p. We can also subtract two null pointers from one another, in which case the result is 0.

//As we’ve seen, in most places when we use the name of an array, we are really using a pointer to the first element in that array. One place where the compiler does this transformation is when we subscript an array. Given
int ia[] = {0,2,4,6,8}; // array with 5 elements of type int
//if we write ia[0], that is an expression that uses the name of an array. When we subscript an array, we are really subscripting a pointer to an element in that array:
int i = ia[2]; // ia is converted to a pointer to the first element in ia
// ia[2] fetches the element to which (ia + 2) points
int *p = ia; // p points to the first element in ia
i = *(p + 2); // equivalent to i = ia[2]

//Unlike subscripts for vector and string, the index of the built-in subscript operator is not an unsigned type.

//3.5.4 C-style Character Strings

//Although C++ supports C-style strings, they should not be used by C++ programs. C-style strings are a surprisingly rich source of bugs and are the root cause of many security problems. They’re also harder to use!

//C-style character strings are not a type. Instead, they are a convention for how to represent and use character strings. Strings that follow this convention are stored in character arrays and are null terminated. By null-terminated we mean that the last character in the string is followed by a null character ('\0'). Ordinarily we use pointers to manipulate these strings.

//C library string functions
//These functions are defined in the cstring header, which is the C++ version of the C header string.h
strlen(p);    //returns the length of p, not counting the null
strcmp(p1, p1);    //compares p1 and p2 for equality. returns 0 if p1==p2, a positive value if p1>p2, a negative value if p1<p2
strcat(p1, p2);    //appends p2 to p1, returns p1
strcpy(p1, p2);    //copies p2 into p1, returns p1
//The pointer passed to these routines must point to null-terminated array.

//3.5.5 Interfacing to Older Code

//More generally, we can use a null-terminated character array anywhere that we can use a string literal:
//We can use a null-terminated character array to initialize or assign a string.
//We can use a null-terminated character array as one operand (but not both operands) to the string addition operator or as the right-hand operand in the string compound assignment (+=) operator.

//There is a string member function named c_str that we can often use to accomplish what we want:
char *str=s;    //error cannot initialize a char* from a string
const char *str=s.c_str();    //ok
//The name c_str indicates that the function returns a C-style character string. That is, it returns a pointer to the beginning of a null-terminated character array that holds the same data as the characters in the string. The type of the pointer is const char*, which prevents us from changing the contents of the array.

//Using an array to initialize a vector
//we cannot initialize a built-in array from another array. Nor can we initialize an array from a vector. However, we can use an array to initialize a vector. To do so, we specify the address of the first element and one past the last element that we wish to copy:
int int_arr[] = {0, 1, 2, 3, 4, 5};
// ivec has six elements; each is a copy of the corresponding element in int_arr
vector<int> ivec(begin(int_arr), end(int_arr));

//3.6 Multidimensional Arrays

//We define an array whose elements are arrays by providing two dimensions: the dimension of the array itself and the dimension of its elements:
int ia[3][4];    //array of size 3; each element is an array of ints of size4
int arr[10][20][30];    //array of size 10; each element is a 20-element array whose elements are arrays of 30 ints
//ia is an array of size 3, each of whose elements is an array of four ints.
//In a two-dimensional array, the first dimension is usually referred to as the row and the second as the column.

//subscripting a multidimensional array
//If an expression provides as many subscripts as there are dimensions, we get an element with the specified type. If we supply fewer subscripts than there are dimensions, then the result is the inner-array element at the specified index.

//This loop does not write to the elements, yet we still define the control variable of the outer loop as a reference. We do so in order to avoid the normal array to pointer conversion. Had we neglected the reference and written these loops as:
for (auto row : ia)
for (auto col : row)
//our program would not compile. As before, the first for iterates through ia, whose elements are arrays of size 4. Because row is not a reference, when the compiler initializes row it will convert each array element (like any other object of array type) to a pointer to that array’s first element. As a result, in this loop the type of row is int*. The inner for loop is illegal. Despite our intentions, that loop attempts to iterate over an int*.

//To use a multidimensional array in a range for, the loop control variable for all but the innermost array must be references.

//Pointers and Multidimensional Arrays
//As with any array, when we use the name of a multidimensional array, it is automatically converted to a pointer to the first element in the array.

//Because a multidimensional array is really an array of arrays, the pointer type to which the array converts is a pointer to the first inner array:
yint ia[3][4]; // array of size 3; each element is an array of ints of size 4
int (*p)[4] = ia; // p points to an array of four ints
p = &ia[2]; // p now points to the last element in ia

int ia[3][4]; // array of size 3; each element is an array of ints of size 4
int (*p)[4] = ia; // p points to an array of four ints
p = &ia[2]; // p now points to the last element in ia
//Applying the strategy from § 3.5.1 (p. 115), we start by noting that (*p) says p is a pointer. Looking right, we see that the object to which p points has a dimension of size 4, and looking left that the element type is int. Hence, p is a pointer to an array of four ints.

//The parentheses in this declaration are essential:
int *ip[4]; // array of pointers to int
int (*ip)[4]; // pointer to an array of four ints

//With the advent of the new standard, we can often avoid having to write the type of a pointer into an array by using auto or decltype:
//print the value of each element in ia, with each inner array on its own line
//p points to an array of four ints
for(auto p=ia; p!=ia+3; ++p){
	//q points to the first element of an array of four ints; that is, q points to an int
	for(auto q=*p; q!=*p+4; ++q)
		cout<<*q<<' ';
	cout<<endl;
}

//Type Aliases Simplify Pointers to Multidimensional Arrays
//A type alias can make it easier to read, write, and  understand pointers to multidimensional arrays. For example:
using int_array=int[4];    //new style type alias declaration; p68
typedef int int_array[4];    //equivalent typedef declaration; p67
//print the value of each element in ia, with each inner array on its onw line
for(int_array *p=ia; p!=ia+3; ++p){
	for(int *q=*p; q!=ia+3; ++p)
		cout<<*q<<' ';
	cout<<endl;
}
//Here we start by defining int_array as a name for the type "array of four ints". We use that type name to define our loop control variable in the outer for loop.
