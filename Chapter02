//Chapter02

//2.1

//Types determine the meaning of the data and operations in our programs.
//C++ defines a set of primitive types that include the arithmetic types and a special type named void.
//The arithmetic types represent characters, intergers, boolean values, and floating-point numbers.
//The void type has no associated values and can be used in only a few circumstances, most commonly as the return type for functions that do not return a value.

//Although threre are three character types, there are only two representations: signed and unsigned. The (Plain) char type uses one of these representations. Which of the other two character representations is equivalent to char depends on the compiler.
//char is signed on some machines and unsigned on others.
//use double for floating-point computations; float usually does not have enough precision, and the cost of double-precision calculations versus single-precision is negligible.

//If we assign an out-of-range value to an object of unsigned type, the result is the remainder of the value modulo the number of values the target type can hold.
//If we assign an out-of-range value to an object of signed type, the result is undefined.

//If we use both unsigned and int values in an arithmetic expression, the int value ordinarily is converted to unsigned.

//2.1.2 Literals
//Integer literals that begin with 0(zero) are interpreted as octal. Those that begin with either 0x or 0X are interpreted as hexadecimal.
//Although integer literals may be stored in signed types, technically speaking, the value of a decimal literal is never a negative number. The minus sign is not part of the literal. The minus sign is an operator that negates the value of its literal operand.

//A character enclosed within single quotes is a literal of type char.
//Zero or more characters enclosed in double quotation marks is a string literal.
//The type of a string literal is array of contant chars. The compiler appends a null character ('\0') to every string literal. Thus, the actual size of a string literal is one more than its apparent size.




