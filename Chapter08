//Chapter 08 The IO Library

//The C++ language does not deal directly with input and output. Instead, IO is handled by a family of types defined in the standard library. These types support IO to and from devices such as files and console windows. Additional types allow in-memory IO to and from strings.

//The IO library defines operations to read and write values of the built-in types. In addition, classes, such as string, typically define similar IO operations to work on objects of their class type as well.

//The getline function, which reads a line of input from a given istream into a given string.

//8.1 The IO Classes

//The IO types and objects that we’ve used so far manipulate char data. By default these objects are connected to the user’s console window. Of course, real programs cannot be limited to doing IO solely to or from a console window. Programs often need to read or write named files. Moreover, it can be convenient to use IO operations to process the characters in a string. Applications also may have to read and write languages that require wide-character support

//To support these different kinds of IO processing, the library defines a collection of IO types in addition to the istream and ostream types that we have already used. These types, which are listed in Table below, are defined in three separate headers: iostream defines the basic types used to read from and write to a stream, fstream defines the types used to read and write named files, and sstream defines the types used to read and write in-memory strings.
//iostream: istream / wistream reads from a stream; ostream / wostream writes to a stream; iostream / wiostream reads and writes a stream;
//fsream: ifstream / wifstream reads from a file; ofstream / wofstream writes to a file; fstream / wfstream reads and writes a file;
//sstream: istringstream / wistringstream reads from a string; ostringstream / wostringstream writes to a string; stringstream / wstringstream reads and writes a string.

//To support languages that use wide characters, the library defines a set of types and objects that manipulate wchar_t data. The names of the widecharacter versions begin with a w. For example, wcin, wcout, and wcerr are the wide-character objects that correspond to cin, cout, and cerr, respectively. The wide-character types and objects are defined in the same header as the plain char types. For example, the fstream header defines both the ifstream and wifstream types.

//Relationships among the IO Types

//Conceptually, neither the kind of device nor the character size affects the IO operations we want to perform. For example, we’d like to use >> to read data regardless of whether we’re reading a console window, a disk file, or a string. Similarly, we’d like to use that operator regardless of whether the characters we read fit in a char or require a wchar_t.
//The library lets us ignore the differences among these different kinds of streams by using inheritance. As with templates, we can use classes related by inheritance without understanding the details of how inheritance works.
//Briefly, inheritance lets us say that a particular class inherits from another class. Ordinarily, we can use an object of an inherited class as if it were an object of the same type as the class from which it inherits.
//The types ifstream and istringstream inherit from istream. Thus, we can use objects of type ifstream or istringstream as if they were istream objects. We can use objects of these types in the same ways as we have used cin. For example, we can call getline on an ifstream or istringstream object, and we can use the >> to read data from an ifstream or istringstream. Similarly, the types ofstream and ostringstream inherit from ostream. Therefore, we can use objects of these types in the same ways that we have used cout.

//Everything that we cover in the remainder of this section applies equally to plain streams, file streams, and string streams and to the char or widecharacter stream versions.

//8.1.1 No Copy of Assign for IO Objects
//We cannot copy or assign objects of the IO types.
//Because we cannot copy the IO types, we cannot have a parameter or return type that is one of the stream types. Functions that do IO typically pass and return the stream through references. Reading or writing and IO object changes its state, so the reference must not be const.

//8.1.2 Condition States
//Inherent in doing IO is the fact that errors can occur. Some errors are recoverable; others occur deep within the system and are beyond the scope of a program to correct. The IO classes define functions and flags, listed in Table below, that let us access and manipulate the condition state of a stream.
strm::iostate    //strm is one of the IO types listed in table above. iostate is a machine-dependent integral type that represents the condition state of a stream;
strm::badbit    //strm::iostate value used to indicate that a stream is corrupted;
strm::failbit    //strm::iostate value used to indicate that an IO operation failed;
strm::eofbit    //strm::iostate value used to indicate that a stream hit end-of-file;
strm::goodbit    //strm::iostate value used indicate that a stream is not in an error state. This value is guaranteed to be zero;
s.eof()    //true if eofbit in the stream s is set;
s.fail()    //true if failbit or badbit in the stream s is set;
s.bad()    //true if badbit in the stream s is set;
s.good()    //true if the stream s is in a valid state;
s.clear()    //Reset all condition values in the stream s to valid state. Returns void;
s.clear(flat)    //Reset the condition of s to flags. Types of flags is strm::iostate. Returns void;
s.setstate(flags)    //Adds specified condition(s) to s. Type of flags is strm::iostate. Returns void;
s.rdstate()    //Returns current condition of s as a strm::iostate value;

//As an example of an IO error, consider the following code:
int ival;
cin >> ival;
//If we enter Boo on the standard input, the read will fail. The input operator expected to read an int but got the character B instead. As a result, cin will be put in an error state. Similarly, cin will be in an error state if we enter an end-of-file.
//Once an error has occurred, subsequent IO operations on that stream will fail. We can read from or write to a stream only when it is in a non-error state. Because a stream might be in an error state, code ordinarily should check whether a stream is okay before attempting to use it. The easiest way to determine the state of a stream object is to use that object as a condition:
while (cin >> word)
// ok: read operation successful . . .
//The while condition checks the state of the stream returned from the >> expression. If that input operation succeeds, the state remains valid and the condition will succeed.

//Interrogating the State of a Stream

//Using a stream as a condition tells us only whether the stream is valid. It does not tell us what happened. Sometimes we also need to know why the stream is invalid. For example, what we do after hitting end-of-file is likely to differ from what we’d do if we encounter an error on the IO device.
//The IO library defines a machine-dependent integral type named iostate that it uses to convey information about the state of a stream. This type is used as a collection of bits. The IO classes define four constexpr values of type iostate that represent particular bit patterns. These values are used to indicate particular kinds of IO conditions. They can be used with the bitwise operators to test or set multiple flags in one operation.
//The badbit indicates a system-level failure, such as an unrecoverable read or write error. It is usually not possible to use a stream once badbit has been set. The failbit is set after a recoverable error, such as reading a character when numeric data was expected. It is often possible to correct such problems and continue using the stream. Reaching end-of-file sets both eofbit and failbit. The goodbit, which is guaranteed to have the value 0, indicates no failures on the stream. If any of badbit, failbit, or eofbit are set, then a condition that evaluates that stream will fail.
//The library also defines a set of functions to interrogate the state of these flags. The good operation returns true if none of the error bits is set. The bad, fail, and eof operations return true when the corresponding bit is on. In addition, fail returns true if bad is set. By implication, the right way to determine the overall state of a stream is to use either good or fail. Indeed, the code that is executed when we use a stream as a condition is equivalent to calling !fail(). The eof and bad operations reveal only whether those specific errors have occurred.

//Managing the Condition State

//The rdstate member returns an iostate value that corresponds to the current state of the stream. The setstate operation turns on the given condition bit(s) to indicate that a problem occurred. The clear member is overloaded: One version takes no arguments and a second version takes a single argument of type iostate.
//The version of clear that takes no arguments turns off all the failure bits. After clear(), a call to good returns true.
// remember the current state of cin
auto old_state = cin.rdstate(); // remember the current state of cin
cin.clear(); // make cin valid
process_input(cin); // use cin
cin.setstate(old_state); // now reset cin to its old state

//8.1.3 Managing the Output Buffer
//There are several conditions that cause the buffer to be flushed—that is, to be written—to the actual output device or file:
//• The program completes normally. All output buffers are flushed as part of the return from main.
//• At some indeterminate time, the buffer can become full, in which case it will be flushed before writing the next value.
//• We can flush the buffer explicitly using a manipulator such as endl.
//• We can use the unitbuf manipulator to set the stream’s internal state to empty the buffer after each output operation. By default, unitbuf is set for cerr, so that writes to cerr are flushed immediately.
//• An output stream might be tied to another stream. In this case, the buffer of the tied stream is flushed whenever the tied stream is read or written. By default, cin and cerr are both tied to cout. Hence, reading cin or writing to cerr flushes the buffer in cout.

//Flushing the Output Buffer
//Our programs have already used the endl manipulator, which ends the current line and flushes the buffer. There are two other similar manipulators: flush and ends. flush flushes the stream but adds no characters to the output; ends inserts a null character into the buffer and then flushes it:
cout << "hi!" << endl; // writes hi and a newline, then flushes the buffer
cout << "hi!" << flush; // writes hi, then flushes the buffer; adds no data
cout << "hi!" << ends; // writes hi and a null, then flushes the buffer

//The unitbuf Manipulator
//If we want to flush after every output, we can use the unitbuf manipulator. This manipulator tells the stream to do a flush after every subsequent write. The nounitbuf manipulator restores the stream to use normal, system-managed buffer flushing:
cout << unitbuf; // all writes will be flushed immediately
// any output is flushed immediately, no buffering
cout << nounitbuf; // returns to normal buffering

//Buffers Are Not Flushed If the Program Crashes
//Output buffers are not flushed if the program terminates abnormally. When a program crashes, it is likely that data the program wrote may be sitting in an output buffer waiting to be printed.
//When you debug a program that has crashed, it is essential to make sure that any output you think should have been written was actually flushed. Countless hours of programmer time have been wasted tracking through code that appeared not to have executed when in fact the buffer had not been flushed and the output was pending when the program crashed.

//Tying Input and Output Streams Together

//When an input stream is tied to an output stream, any attempt to read the input stream will first flush the buffer associated with the output stream. The library ties cout to cin, so the statement
cin >> ival;
//causes the buffer associated with cout to be flushed.

//Interactive systems usually should tie their input stream to their output stream. Doing so means that all output, which might include prompts to the user, will be written before attempting to read the input.

//There are two overloaded versions of tie: One version takes no argument and returns a pointer to the output stream, if any, to which this object is currently tied. The function returns the null pointer if the stream is not tied.
//The second version of tie takes a pointer to an ostream and ties itself to that ostream. That is, x.tie(&o) ties the stream x to the output stream o.

//8.2 File Input and Output

//The fstream header defines three types to support file IO: ifstream to read from a given file, ofstream to write to a given file, and fstream, which reads and writes a given file.

//These types provide the same operations as those we have previously used on the objects cin and cout. In particular, we can use the IO operators (<< and >>) to read and write files, we can use getline to read an ifstream, and the material covered in applies to these types.

//In addition to the behavior that they inherit from iostream types, the types defined in fstream add members to manage the file associated with the stream. These operations can be called on objects of fstream, ifstrem, or ofstream but not on other IO types.

fstream fstrm;    //Creates an unbounded file stream. fstream is one of the type defined in the fstream header;
fstream fstrm(s);    //Create an fstream and opens the file named s. s can have type string or can be a pointer to a C-style character string. These constructors are explicit. The default file mode depends on the type of fstream;
fstream fstrm(s, mode);    //Like the previous constructor, but opens s in the given mode;
fstrm.open(s);    //Opens the file named by the s and binds that file to fstrm. s can be a string or a pointer to a C-style character string. The default file mode depends on the type of fstream. Returns void;
fstrm.open(s, mode);
fstrm.close();    //Closes the file to which fstrm is bound. Return void;
fstrm.is_open();    //Returns a bool indicating whether the file associated with fstrm was successfully opened and has not been closed.

//8.2.1 Using File Stream Objects

//When we want to read or write a file, we define a file stream object and associate that object with the file. Each file stream class defines a member function named open that does whatever system-specific operations are required to locate the given file and open it for reading or writing as appropriate.

//When we create a file stream, we can (optionally) provide a file name. When we supply a file name, open is called automatically:
ifstream in(ifile); // construct an ifstream and open the given file
ofstream out; // output file stream that is not associated with any file
//This code defines in as an input stream that is initialized to read from the file named by the string argument ifile. It defines out as an output stream that is not yet associated with a file. With the new standard, file names can be either library strings or C-style character arrays. Previous versions of the library allowed only C-style character arrays.

//Using an fstream in Place of an iostream&

//We can use an object of an inherited type in places where an object of the original type is expected. This fact means that functions that are written to take a reference (or pointer) to one of the iostream types can be called on behalf of the corresponding fstream (or sstream) type. That is, if we have a function that takes an ostream&, we can call that function passing it an ofstream object, and similarly for istream& and ifstream.

//The open and close Members

//When we define an empty file stream object, we can subsequently associate that object with a file by calling open:
ifstream in(ifile);    //construct an ifstream and open the given file
ostream out;    //output file stream that is not associated with any file
out.open(ifile+".copy");    //open the specific file

//If a call to open fails, failbit is set. Because a call to open might fail, it is usually a good idea to verify that the open succeeded:
if(out)    //check that the open succeeded
    //    the open succeeded, so we can use the file
//This condition is similar to those we've used on cin. If the open fails, this condition will fail and we will not attempt to use in.

//Once a file stream has been opened, it remains associated with the specified file. Indeed, calling open on a file stream that is already open will fail and set failbit. Subsequent attempts to use that file stream will fail. To associate a file stream with a different file, we must first close the existing file. Once the file is closed, we can open a new one:

in.close();    //close the file
in.open(ifile+"2");    //open another file

//If the open succeeds, then open sets the stream's state so that good() is true.

//Automatic Construction and Destruction

// for each file passed to the program
for (auto p = argv + 1; p != argv + argc; ++p) {
	ifstream input(*p); // create input and open the file
	if (input) { // if the file is ok, ''process'' this file
		process(input);
	} else
		cerr << "couldn't open: " + string(*p);
} // input goes out of scope and is destroyed on each iteration
//Each iteration constructs a new ifstream object named input and opens it to read the given file. As usual, we check that the open succeeded. If so, we pass that file to a function that will read and process the input. If not, we print an error message and continue.

//Because input is local to the while, it is created and destroyed on each iteration. When an fstream object goes out of scope, the file it is bound to is automatically closed. On the next iteration, input is created a new.

//When an fstream object is destroyed, close is called automatically.

//8.2.2 File Modes

//Each stream has an associated file mode that represents how the file may be used. 
in;    //Open for input;
out;    //Open for output;
app;    //Seek to the end before every write;
ate;    //Seek to the end immediately after the open;
trunc;    //Truncate the file;
binary;    //Do IO operations in binary mode

//We can supply a file mode whenever we open a file - either when we call open or when we indirectly open the file when we initialize a stream from a file name. The modes that we can specify have the following restrictions:
//• out may be set only for an ofstream or fstream object.
//• in may be set only for an ifstream or fstream object.
//• trunc may be set only when out is also specified.
//• app mode may be specified so long as trunc is not. If app is specified, the file is always opened in output mode, even if out was not explicitly specified.
//• By default, a file opened in out mode is truncated even if we do not specify trunc. To preserve the contents of a file opened with out, either we must also specify app, in which case we can write only at the end of the file, or we must also specify in, in which case the file is open for both input and output will cover using the same file for input and output).
//• The ate and binary modes may be specified on any file stream object type and in combination with any other file modes.

//Each file stream type defines a default file mode that is used whenever we do not otherwise specify a mode. Files associated with an ifstream are opened in in mode; files associated with an ofstream are opened in out mode; and files associated with an fstream are opened with both in and out modes.

//Opening a File in out Mode Discards Existing Data
//By default, when we open an ofstream, the contents of the file are discarded. The only way to prevent an ostream from emptying the given file is to specify app:
// file1 is truncated in each of these cases
ofstream out("file1"); // out and trunc are implicit
ofstream out2("file1", ofstream::out); // trunc is implicit
ofstream out3("file1", ofstream::out | ofstream::trunc);
// to preserve the file's contents, we must explicitly specify app mode
ofstream app("file2", ofstream::app); // out is implicit
ofstream app2("file2", ofstream::out | ofstream::app);
//The only way to preserve the existing data in a file opened by an ofstream is to specify app or in mode explicitly.

//File Mode is Determined Each Time open is Called

//The file mode of a given stream may change each time a file is opened.
ofstream out; // no file mode is set
out.open("scratchpad"); // mode implicitly out and trunc
out.close(); // close out so we can use it for a different file
out.open("precious", ofstream::app); // mode is out and app
out.close();
//The first call to open does not specify an output mode explicitly; this file is implicitly opened in out mode. As usual, out implies trunc. Therefore, the file named scratchpad in the current directory will be truncated. When we open the file named precious, we ask for append mode. Any data in the file remains, and all writes are done at the end of the file.
//Any time open is called, the file mode is set, either explicitly or implicitly. Whenever a mode is not specified, the default value is used.

//8.3 string streams

//The sstream header defines three types to support in-memory IO; these types read from or write to a string as if the string were an IO stream.

//The istringstream type reads a string, ostringstream writes a string, and stringstream reads and writes the string. Like the fstream types, the types defined in sstream inherit from the types we have used from the iostream header. In addition to the operations they inherit, the types defined in sstream add members to manage the string associated with the stream.
sstream strm;    //strm is an unbound stringstream. sstream is one of the types defined in the sstream header;

sstream strm(s);    //strm is an sstream that holds a copy of the string s. This constructor is explicit;
strm.str();    //Returns a copy of the string that strm holds;
strm.str(s);    //Copies the string s into strm. Returns void;
//Note that although fstream and sstream share the interface to iostream, they have no other interrelationship. In particular, we cannot use open and close on a stringstream, nor can we use str on an fstream.

//8.3.1 Using an istringstream

//An istringstream is often used when we have some work to do on an entire line, and other work to do with individual words within a line.

//8.3.2 Using ostringstreams

//An ostringstream is useful when we need to build up our output a little at a time but do not want to print the output until later.

//Summary
//C++ uses library classes to handle stream-oriented input and output:
//• The iostream classes handle IO to console
//• The fstream classes handle IO to named files
//• The stringstream classes do IO to in-memory strings
//The fstream and stringstream classes are related by inheritance to the iostream classes. The input classes inherit from istream and the output classes from ostream. Thus, operations that can be performed on an istream object can also be performed on either an ifstream or an istringstream. Similarly for the output classes, which inherit from ostream.
//Each IO object maintains a set of condition states that indicate whether IO can be done through this object. If an error is encountered—such as hitting end-of-file on an input stream—then the object’s state will be such that no further input can be done until the error is rectified. The library provides a set of functions to set and test these states.
